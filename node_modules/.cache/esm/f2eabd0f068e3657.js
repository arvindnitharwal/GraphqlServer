let GraphQLServer,makeExecutableSchema,merge,userBasetypeDef,userBaseResolvers;_068‍.w("graphql-yoga",[["GraphQLServer",["GraphQLServer"],function(v){GraphQLServer=v}]]);_068‍.w("graphql-tools",[["makeExecutableSchema",["makeExecutableSchema"],function(v){makeExecutableSchema=v}]]);_068‍.w("lodash.merge",[["default",["merge"],function(v){merge=v}]]);_068‍.w("./services/userBaseService/typeDef",[["default",["userBasetypeDef"],function(v){userBasetypeDef=v}]]);_068‍.w("./services/userBaseService/resolver",[["default",["userBaseResolvers"],function(v){userBaseResolvers=v}]]);




const jsonData=require('./services/appSetting.json');
const typeDefs = [
    userBasetypeDef,
];
const resolvers = merge(
    userBaseResolvers,
);

const schema = makeExecutableSchema({
    typeDefs,
    resolvers,
});
const server = new GraphQLServer({ schema });
server.start(jsonData.graphqlServer, ({ port }) =>
    console.log(
        `Server started, listening on port ${port} for incoming requests.`,
    ));